!function(t){var e={};function n(o){if(e[o])return e[o].exports;var i=e[o]={i:o,l:!1,exports:{}};return t[o].call(i.exports,i,i.exports,n),i.l=!0,i.exports}n.m=t,n.c=e,n.d=function(t,e,o){n.o(t,e)||Object.defineProperty(t,e,{enumerable:!0,get:o})},n.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},n.t=function(t,e){if(1&e&&(t=n(t)),8&e)return t;if(4&e&&"object"==typeof t&&t&&t.__esModule)return t;var o=Object.create(null);if(n.r(o),Object.defineProperty(o,"default",{enumerable:!0,value:t}),2&e&&"string"!=typeof t)for(var i in t)n.d(o,i,function(e){return t[e]}.bind(null,i));return o},n.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return n.d(e,"a",e),e},n.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},n.p="",n(n.s=5)}([function(t,e,n){window,t.exports=function(t){var e={};function n(o){if(e[o])return e[o].exports;var i=e[o]={i:o,l:!1,exports:{}};return t[o].call(i.exports,i,i.exports,n),i.l=!0,i.exports}return n.m=t,n.c=e,n.d=function(t,e,o){n.o(t,e)||Object.defineProperty(t,e,{configurable:!1,enumerable:!0,get:o})},n.r=function(t){Object.defineProperty(t,"__esModule",{value:!0})},n.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return n.d(e,"a",e),e},n.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},n.p="./dist/",n(n.s=0)}([function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var o={create:function(){var t=document,e=t.createDocumentFragment(),n=t.createElement("div"),o=this.zIndex||1e3;n.innerHTML='\n            <div class="toast-container"\n                style="position: fixed; top: 0; left: 0; width: 100%; height: 100%; z-index: '+o+'; background-color: rgba(0,0,0,0.5); display: none">\n                <div class="toast-content-container"\n                    style="position: absolute; top: 50%; left: 50%; transform: translate(-50%, -50%); -webkit-transform: translate(-50%, -50%);"\n                >\n                    <div id="toastContent" class="toast-content" style="padding: 4px 10px; -webkit-transition: -webkit-transform 500ms ease-out, opacity 500ms ease-out; transition: transform 500ms ease-out, opacity 500ms ease-out; background-color: #000; border-radius: 4px; color: #fff;"\n                    ></div>\n                </div>\n            </div>\n        ',this.toast=n.children[0],e.appendChild(this.toast),t.body.appendChild(e)},setZIndex:function(t){this.zIndex=t,this.toast&&(this.toast.style.zIndex=t)},show:function(t,e){var n=this;this.toast||this.create();var o=this.toast,i=o.ownerDocument,r=i.getElementById("toastContent");r.innerHTML="",r.appendChild(i.createTextNode(t)),this.playShowAnim(r),o.style.display="block",setTimeout(function(){return n.hide()},e||2e3)},playShowAnim:function(t){t.style.transform="translateY(-40px)",t.style.webkitTransform="translateY(-40px)",t.style.opacity=0,setTimeout(function(){t.style.transform="translateY(0px)",t.style.webkitTransform="translateY(0px)",t.style.opacity=1})},hide:function(){var t=this,e=this.toast.ownerDocument.getElementById("toastContent");this.playHideAnim(e);var n=function(){console.log("in after anim"),t.toast.style.display="none"};e.style.transition?this.addOnceEvent(e,"transitionend",n):e.style.webkitTransition?this.addOnceEvent(e,"webkitTransitionEnd",n):n()},addOnceEvent:function(t,e,n){var o=this,i=arguments;t.addEventListener(e,function r(){t.removeEventListener(e,r),n.apply(o,i)})},playHideAnim:function(t){t.style.transform="translateY(10px)",t.style.webkitTransform="translateY(10px)",t.style.opacity=0}};e.default=o}])},function(t,e){t.exports=class{constructor(t,e=!1){this.src=t,this.context=new(window.AudioContext||window.webkitAudioContext),this.loaded=!1,this.buffer=null,this.source=null,this.debugState=e,this.startedAt=0,this.offset=0,this.loopState=!1,this.listeners={},this.ownListeners={},this.playing=!1,this.ownEvents=["play","stop","pause","forward","rewind","load","loaded"],this.initSource()}initSource(){this.source=this.context.createBufferSource(),this.source.connect(this.context.destination);const t=Object.keys(this.listeners);t.length&&t.map(t=>{this.log(`Re-add event: ${t}`),this.source.addEventListener(t,this.listeners[t])})}clearSource(){this.source&&(this.playing&&this.source.stop(),this.source.disconnect(),this.initSource())}stop(){this.clearSource(),this.startedAt=0,this.offset=0,this.playing=!1,this.log("Stopped."),"function"==typeof this.ownListeners.stop&&this.ownListeners.stop()}load(t){return t=t||this.src,this.log("Loading",t),"function"==typeof this.ownListeners.load&&this.ownListeners.load(t),this.loaded&&(this.clearSource(),this.loaded=!1),"string"!=typeof t?(this.fetcher=this.context.decodeAudioData(t).then(t=>{this.loaded=!0,this.buffer=t,"function"==typeof this.ownListeners.loaded&&this.ownListeners.loaded()}),this):(this.fetcher=window.fetch(t,{method:"GET",mode:"no-cors"}).then(t=>t.arrayBuffer()).then(t=>this.context.decodeAudioData(t)).then(t=>{this.loaded=!0,this.buffer=t,"function"==typeof this.ownListeners.loaded&&this.ownListeners.loaded()}),this)}getPlayTime(){return this.context.currentTime-this.startedAt+this.offset}play(t){if("suspended"!==this.context.state)return this.loaded?void(this.source.buffer||(this.source.buffer=this.buffer,this.source.loopEnd=this.buffer.duration,this.source.loop=this.loopState,this.startedAt=this.context.currentTime,this.source.start(0,t),this.playing=!0,this.source.addEventListener("ended",()=>this.stop()),this.log("Playing..."),"function"==typeof this.ownListeners.play&&this.ownListeners.play())):(this.log("Waiting for buffer to load..."),void this.fetcher.then(()=>this.play()));this.context.resume()}pause(){this.context.suspend(),this.playing=!1,this.log("Paused."),"function"==typeof this.ownListeners.pause&&this.ownListeners.pause()}loop(t){return this.loopState=t,this.log("Loop:",t?"ON":"OFF"),this.source.loop=t,this}toggleLoop(){return this.loopState=!this.loopState,this.log("Toggle loop:",this.loopState?"ON":"OFF"),this.source.loop=this.loopState,this}forward(t=5){this.log(`>> Forward ${t} seconds`),"function"==typeof this.ownListeners.forward&&this.ownListeners.forward(t);const e=this.getPlayTime();this.offset=e+t,this.offset>this.buffer.duration&&(this.offset=this.buffer.duration-t),this.log("Play @",this.offset),this.clearSource(),this.play(this.offset)}rewind(t=5){this.log(`<< Rewind ${t} seconds`),"function"==typeof this.ownListeners.rewind&&this.ownListeners.rewind(t);const e=this.getPlayTime();this.offset=e-t,this.offset<0&&(this.offset=0),this.log("Play @",this.offset),this.clearSource(),this.play(this.offset)}useKeyboard(t){this.log("Using keyboard.");let e=document.body;return t&&(e=document.querySelector(t)),e.addEventListener("keydown",({key:t})=>{const e={ArrowRight:()=>this.forward(),ArrowLeft:()=>this.rewind(),z:()=>this.stop(),x:()=>this.play(),c:()=>this.pause(),l:()=>this.toggleLoop()}[t];e&&e()}),this}isOwnEvent(t){return this.ownEvents.includes(t)}on(t,e){return this.isOwnEvent(t)?(this.ownListeners[t]=e,this):(this.source.addEventListener(t,e),this.listeners[t]=e,this)}debug(t){return this.debugState=t,this}log(){this.debugState&&console.log("Player:",...arguments)}}},function(t,e,n){t.exports=function(t,e){if("string"==typeof t){var n=t;if(!(t=window.document.querySelector(t)))throw new Error('"'+n+'" does not match any HTML elements')}if(!t)throw new Error('"'+t+'" is not a valid HTML element');"function"==typeof e&&(e={onDrop:e});var s;return t.addEventListener("dragenter",a,!1),t.addEventListener("dragover",u,!1),t.addEventListener("dragleave",l,!1),t.addEventListener("drop",c,!1),function(){f(),t.removeEventListener("dragenter",a,!1),t.removeEventListener("dragover",u,!1),t.removeEventListener("dragleave",l,!1),t.removeEventListener("drop",c,!1)};function a(t){return e.onDragEnter&&e.onDragEnter(t),t.stopPropagation(),t.preventDefault(),!1}function u(n){if(n.stopPropagation(),n.preventDefault(),e.onDragOver&&e.onDragOver(n),n.dataTransfer.items){var o=Array.from(n.dataTransfer.items),i=o.filter(function(t){return"file"===t.kind}),r=o.filter(function(t){return"string"===t.kind});if(0===i.length&&!e.onDropText)return;if(0===r.length&&!e.onDrop)return;if(0===i.length&&0===r.length)return}return t.classList.add("drag"),clearTimeout(s),n.dataTransfer.dropEffect="copy",!1}function l(t){return t.stopPropagation(),t.preventDefault(),e.onDragLeave&&e.onDragLeave(t),clearTimeout(s),s=setTimeout(f,50),!1}function c(t){t.stopPropagation(),t.preventDefault(),e.onDragLeave&&e.onDragLeave(t),clearTimeout(s),f();var n={x:t.clientX,y:t.clientY},a=t.dataTransfer.getData("text");if(a&&e.onDropText&&e.onDropText(a,n),e.onDrop&&t.dataTransfer.items){var u=t.dataTransfer.files,l=Array.from(t.dataTransfer.items).filter(function(t){return"file"===t.kind});if(0===l.length)return;i(l.map(function(t){return function(e){!function(t,e){var n=[];if(t.isFile)t.file(function(n){n.fullPath=t.fullPath,n.isFile=!0,n.isDirectory=!1,e(null,n)},function(t){e(t)});else if(t.isDirectory){var o=t.createReader();!function s(){o.readEntries(function(o){o.length>0?(n=n.concat(Array.from(o)),s()):i(n.map(function(t){return function(e){r(t,e)}}),function(n,o){n?e(n):(o.push({fullPath:t.fullPath,name:t.name,isFile:!1,isDirectory:!0}),e(null,o))})})}()}}(t.webkitGetAsEntry(),e)}}),function(t,i){if(t)throw t;var r=o(i),s=r.filter(function(t){return t.isFile}),a=r.filter(function(t){return t.isDirectory});e.onDrop(s,n,u,a)})}return!1}function f(){t.classList.remove("drag")}};var o=n(6),i=n(7);function r(t,e){var n=[];if(t.isFile){t.file(function(n){n.fullPath=t.fullPath;n.isFile=true;n.isDirectory=false;e(null,n)},function(t){e(t)})}else if(t.isDirectory){var o=t.createReader();s()}function s(){o.readEntries(function(t){if(t.length>0){n=n.concat(Array.from(t));s()}else{a()}})}function a(){i(n.map(function(t){return function(e){r(t,e)}}),function(n,o){if(n){e(n)}else{o.push({fullPath:t.fullPath,name:t.name,isFile:false,isDirectory:true});e(null,o)}})}}},function(t,e){t.exports=class{constructor({audioContext:t,audioBuffer:e,audioSource:n,canvas:o}={}){"string"==typeof o&&(o=document.getElementById(o)),o||(o=document.createElement("canvas"),document.body.appendChild(o)),this.$canvas=o,this.width=window.innerWidth||document.documentElement.clientWidth||document.body.clientWidth,this.height=window.innerHeight||document.documentElement.clientHeight||document.body.clientHeight,this.$canvas.width=this.width,this.$canvas.height=this.height,this.canvasContext=this.$canvas.getContext("2d"),t&&e&&n&&this.setAnalyzer({audioContext:t,audioBuffer:e,audioSource:n})}setAnalyzer({audioContext:t,audioBuffer:e,audioSource:n}){return console.log("SET ANALYZER"),this.analyser=t.createAnalyser(),this.analyser.fftSize=2048,this.analyser.minDecibels=-90,this.analyser.maxDecibels=-10,this.analyser.smoothingTimeConstant=.85,this.analyser.buffer=e,n.connect(this.analyser),this}render(){const t=this.analyser.fftSize,e=new Uint8Array(t);window.requestAnimationFrame(()=>this.render()),this.analyser.getByteTimeDomainData(e),this.canvasContext.fillStyle="black",this.canvasContext.fillRect(0,0,this.width,this.height),this.canvasContext.lineWidth=2,this.canvasContext.strokeStyle="yellow",this.canvasContext.beginPath();const n=1*this.width/t;let o=0;for(let i=0;i<t;i++){const t=e[i]/128*this.height/2;0===i?this.canvasContext.moveTo(o,t):this.canvasContext.lineTo(o,t),o+=n}this.canvasContext.lineTo(this.$canvas.width,this.$canvas.height/2),this.canvasContext.stroke()}}},function(t,e){t.exports=new class{isFullscreen(){return this.fullscreenElement=document.fullscreenElement,void 0===this.fullscreenElement&&(this.fullscreenElement=document.webkitFullscreenElement),!!this.fullscreenElement}toggle(){if(this.isFullscreen())return this.disableFullscreen();this.enableFullscreen()}enableFullscreen(){if(document.body.requestFullscreen)return document.body.requestFullscreen();document.body.webkitRequestFullScreen()}disableFullscreen(){document.exitFullscreen&&document.exitFullscreen(),document.webkitExitFullscreen()}set(t=document){"string"==typeof t&&(t=document.querySelector(t)),t.addEventListener("dblclick",()=>{this.toggle()})}}},function(t,e,n){"use strict";n.r(e);var o=n(1),i=n.n(o),r=n(2),s=n.n(r),a=n(0),u=n.n(a),l=n(3),c=n.n(l),f=n(4);let d,h;n.n(f).a.set(),console.log("TOAST",u.a);const p=2e3,y=new c.a,m=new i.a("https://play-spectrum.herokuapp.com/deploy.mp3");function g(t){if(u.a.toast&&"none"!==u.a.toast.style.display)return clearTimeout(h),void(h=setTimeout(()=>g(t),100));u.a.show(t,p)}m.debug(!0).on("stop",()=>g("Stop.")).on("pause",()=>g("Pause.")).on("play",()=>{d&&g(`Playing ${d}...`),y.setAnalyzer({audioContext:m.context,audioBuffer:m.buffer,audioSource:m.source}).render()}).on("forward",t=>g(`Forward ${t} seconds.`)).on("rewind",t=>g(`Rewind ${t} seconds.`)).useKeyboard().load().play(),g("Drop an audio file to start playing!"),s()("body",function(t){const e=t[0];console.log("GOT FILE:",e),d=e.name;const n=new window.FileReader;n.addEventListener("load",t=>{const e=t.target.result;m.load(e).play()}),n.addEventListener("error",t=>{console.error("FileReader error"+t),u.a.show("Oops! Something went wrong :(")}),n.readAsArrayBuffer(e)})},function(t,e){t.exports=function(t,e){return(e="number"==typeof e?e:1/0)?function t(n,o){return n.reduce(function(n,i){return Array.isArray(i)&&o<e?n.concat(t(i,o+1)):n.concat(i)},[])}(t,1):Array.isArray(t)?t.map(function(t){return t}):t}},function(t,e,n){(function(e){t.exports=function(t,n){var o,i,r,s=!0;Array.isArray(t)?(o=[],i=t.length):(r=Object.keys(t),o={},i=r.length);function a(t){function i(){n&&n(t,o),n=null}s?e.nextTick(i):i()}function u(t,e,n){o[t]=n,(0==--i||e)&&a(e)}i?r?r.forEach(function(e){t[e](function(t,n){u(e,t,n)})}):t.forEach(function(t,e){t(function(t,n){u(e,t,n)})}):a(null);s=!1}}).call(this,n(8))},function(t,e){var n,o,i=t.exports={};function r(){throw new Error("setTimeout has not been defined")}function s(){throw new Error("clearTimeout has not been defined")}function a(t){if(n===setTimeout)return setTimeout(t,0);if((n===r||!n)&&setTimeout)return n=setTimeout,setTimeout(t,0);try{return n(t,0)}catch(e){try{return n.call(null,t,0)}catch(e){return n.call(this,t,0)}}}!function(){try{n="function"==typeof setTimeout?setTimeout:r}catch(t){n=r}try{o="function"==typeof clearTimeout?clearTimeout:s}catch(t){o=s}}();var u,l=[],c=!1,f=-1;function d(){c&&u&&(c=!1,u.length?l=u.concat(l):f=-1,l.length&&h())}function h(){if(!c){var t=a(d);c=!0;for(var e=l.length;e;){for(u=l,l=[];++f<e;)u&&u[f].run();f=-1,e=l.length}u=null,c=!1,function(t){if(o===clearTimeout)return clearTimeout(t);if((o===s||!o)&&clearTimeout)return o=clearTimeout,clearTimeout(t);try{o(t)}catch(e){try{return o.call(null,t)}catch(e){return o.call(this,t)}}}(t)}}function p(t,e){this.fun=t,this.array=e}function y(){}i.nextTick=function(t){var e=new Array(arguments.length-1);if(arguments.length>1)for(var n=1;n<arguments.length;n++)e[n-1]=arguments[n];l.push(new p(t,e)),1!==l.length||c||a(h)},p.prototype.run=function(){this.fun.apply(null,this.array)},i.title="browser",i.browser=!0,i.env={},i.argv=[],i.version="",i.versions={},i.on=y,i.addListener=y,i.once=y,i.off=y,i.removeListener=y,i.removeAllListeners=y,i.emit=y,i.prependListener=y,i.prependOnceListener=y,i.listeners=function(t){return[]},i.binding=function(t){throw new Error("process.binding is not supported")},i.cwd=function(){return"/"},i.chdir=function(t){throw new Error("process.chdir is not supported")},i.umask=function(){return 0}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,