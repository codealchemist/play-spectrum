!function(t){var e={};function n(o){if(e[o])return e[o].exports;var r=e[o]={i:o,l:!1,exports:{}};return t[o].call(r.exports,r,r.exports,n),r.l=!0,r.exports}n.m=t,n.c=e,n.d=function(t,e,o){n.o(t,e)||Object.defineProperty(t,e,{enumerable:!0,get:o})},n.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},n.t=function(t,e){if(1&e&&(t=n(t)),8&e)return t;if(4&e&&"object"==typeof t&&t&&t.__esModule)return t;var o=Object.create(null);if(n.r(o),Object.defineProperty(o,"default",{enumerable:!0,value:t}),2&e&&"string"!=typeof t)for(var r in t)n.d(o,r,function(e){return t[e]}.bind(null,r));return o},n.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return n.d(e,"a",e),e},n.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},n.p="",n(n.s=3)}([function(t,e,n){window,t.exports=function(t){var e={};function n(o){if(e[o])return e[o].exports;var r=e[o]={i:o,l:!1,exports:{}};return t[o].call(r.exports,r,r.exports,n),r.l=!0,r.exports}return n.m=t,n.c=e,n.d=function(t,e,o){n.o(t,e)||Object.defineProperty(t,e,{configurable:!1,enumerable:!0,get:o})},n.r=function(t){Object.defineProperty(t,"__esModule",{value:!0})},n.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return n.d(e,"a",e),e},n.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},n.p="./dist/",n(n.s=0)}([function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var o={create:function(){var t=document,e=t.createDocumentFragment(),n=t.createElement("div"),o=this.zIndex||1e3;n.innerHTML='\n            <div class="toast-container"\n                style="position: fixed; top: 0; left: 0; width: 100%; height: 100%; z-index: '+o+'; background-color: rgba(0,0,0,0.5); display: none">\n                <div class="toast-content-container"\n                    style="position: absolute; top: 50%; left: 50%; transform: translate(-50%, -50%); -webkit-transform: translate(-50%, -50%);"\n                >\n                    <div id="toastContent" class="toast-content" style="padding: 4px 10px; -webkit-transition: -webkit-transform 500ms ease-out, opacity 500ms ease-out; transition: transform 500ms ease-out, opacity 500ms ease-out; background-color: #000; border-radius: 4px; color: #fff;"\n                    ></div>\n                </div>\n            </div>\n        ',this.toast=n.children[0],e.appendChild(this.toast),t.body.appendChild(e)},setZIndex:function(t){this.zIndex=t,this.toast&&(this.toast.style.zIndex=t)},show:function(t,e){var n=this;this.toast||this.create();var o=this.toast,r=o.ownerDocument,i=r.getElementById("toastContent");i.innerHTML="",i.appendChild(r.createTextNode(t)),this.playShowAnim(i),o.style.display="block",setTimeout(function(){return n.hide()},e||2e3)},playShowAnim:function(t){t.style.transform="translateY(-40px)",t.style.webkitTransform="translateY(-40px)",t.style.opacity=0,setTimeout(function(){t.style.transform="translateY(0px)",t.style.webkitTransform="translateY(0px)",t.style.opacity=1})},hide:function(){var t=this,e=this.toast.ownerDocument.getElementById("toastContent");this.playHideAnim(e);var n=function(){console.log("in after anim"),t.toast.style.display="none"};e.style.transition?this.addOnceEvent(e,"transitionend",n):e.style.webkitTransition?this.addOnceEvent(e,"webkitTransitionEnd",n):n()},addOnceEvent:function(t,e,n){var o=this,r=arguments;t.addEventListener(e,function i(){t.removeEventListener(e,i),n.apply(o,r)})},playHideAnim:function(t){t.style.transform="translateY(10px)",t.style.webkitTransform="translateY(10px)",t.style.opacity=0}};e.default=o}])},function(t,e){t.exports=class{constructor(t,e=!1){this.src=t,this.context=new(window.AudioContext||window.webkitAudioContext),this.loaded=!1,this.buffer=null,this.source=null,this.debugState=e,this.startedAt=0,this.offset=0,this.loopState=!1,this.listeners={},this.ownListeners={},this.playing=!1,this.ownEvents=["play","stop","pause","forward","rewind","load","loaded"],this.initSource()}initSource(){this.source=this.context.createBufferSource(),this.source.connect(this.context.destination);const t=Object.keys(this.listeners);t.length&&t.map(t=>{this.log(`Re-add event: ${t}`),this.source.addEventListener(t,this.listeners[t])})}clearSource(){this.source&&(this.playing&&this.source.stop(),this.source.disconnect(),this.initSource())}stop(){this.playing&&(this.clearSource(),this.startedAt=0,this.offset=0,this.playing=!1,this.log("Stopped."),"function"==typeof this.ownListeners.stop&&this.ownListeners.stop())}load(t){return t=t||this.src,this.log("Loading",t),"function"==typeof this.ownListeners.load&&this.ownListeners.load(t),this.loaded&&(this.clearSource(),this.loaded=!1),"string"!=typeof t?(this.fetcher=this.context.decodeAudioData(t).then(t=>{this.loaded=!0,this.buffer=t,"function"==typeof this.ownListeners.loaded&&this.ownListeners.loaded()}),this):(this.fetcher=window.fetch(t,{method:"GET",mode:"no-cors"}).then(t=>t.arrayBuffer()).then(t=>this.context.decodeAudioData(t)).then(t=>{this.loaded=!0,this.buffer=t,"function"==typeof this.ownListeners.loaded&&this.ownListeners.loaded()}),this)}getPlayTime(){return this.context.currentTime-this.startedAt+this.offset}play(t){if("suspended"!==this.context.state)return this.loaded?void(this.source.buffer||(this.source.buffer=this.buffer,this.source.loopEnd=this.buffer.duration,this.source.loop=this.loopState,this.startedAt=this.context.currentTime,this.source.start(0,t),this.playing=!0,this.source.addEventListener("ended",()=>this.stop()),this.log("Playing..."),"function"==typeof this.ownListeners.play&&this.ownListeners.play())):(this.log("Waiting for buffer to load..."),void this.fetcher.then(()=>this.play()));this.context.resume()}pause(){this.context.suspend(),this.playing=!1,this.log("Paused."),"function"==typeof this.ownListeners.pause&&this.ownListeners.pause()}loop(t){return this.loopState=t,this.log("Loop:",t?"ON":"OFF"),this.source.loop=t,this}toggleLoop(){return this.loopState=!this.loopState,this.log("Toggle loop:",this.loopState?"ON":"OFF"),this.source.loop=this.loopState,this}forward(t=5){this.log(`>> Forward ${t} seconds`),"function"==typeof this.ownListeners.forward&&this.ownListeners.forward(t);const e=this.getPlayTime();this.offset=e+t,this.offset>this.buffer.duration&&(this.offset=this.buffer.duration-t),this.log("Play @",this.offset),this.clearSource(),this.play(this.offset)}rewind(t=5){this.log(`<< Rewind ${t} seconds`),"function"==typeof this.ownListeners.rewind&&this.ownListeners.rewind(t);const e=this.getPlayTime();this.offset=e-t,this.offset<0&&(this.offset=0),this.log("Play @",this.offset),this.clearSource(),this.play(this.offset)}useKeyboard(t){this.log("Using keyboard.");let e=document.body;return t&&(e=document.querySelector(t)),e.addEventListener("keydown",({key:t})=>{const e={ArrowRight:()=>this.forward(),ArrowLeft:()=>this.rewind(),z:()=>this.stop(),x:()=>this.play(),c:()=>this.pause(),l:()=>this.toggleLoop()}[t];e&&e()}),this}isOwnEvent(t){return this.ownEvents.includes(t)}on(t,e){return this.isOwnEvent(t)?(this.ownListeners[t]=e,this):(this.source.addEventListener(t,e),this.listeners[t]=e,this)}debug(t){return this.debugState=t,this}log(){this.debugState&&console.log("Player:",...arguments)}}},function(t,e,n){t.exports=function(t,e){if("string"==typeof t){var n=t;if(!(t=window.document.querySelector(t)))throw new Error('"'+n+'" does not match any HTML elements')}if(!t)throw new Error('"'+t+'" is not a valid HTML element');"function"==typeof e&&(e={onDrop:e});var s;return t.addEventListener("dragenter",a,!1),t.addEventListener("dragover",u,!1),t.addEventListener("dragleave",l,!1),t.addEventListener("drop",c,!1),function(){f(),t.removeEventListener("dragenter",a,!1),t.removeEventListener("dragover",u,!1),t.removeEventListener("dragleave",l,!1),t.removeEventListener("drop",c,!1)};function a(t){return e.onDragEnter&&e.onDragEnter(t),t.stopPropagation(),t.preventDefault(),!1}function u(n){if(n.stopPropagation(),n.preventDefault(),e.onDragOver&&e.onDragOver(n),n.dataTransfer.items){var o=Array.from(n.dataTransfer.items),r=o.filter(function(t){return"file"===t.kind}),i=o.filter(function(t){return"string"===t.kind});if(0===r.length&&!e.onDropText)return;if(0===i.length&&!e.onDrop)return;if(0===r.length&&0===i.length)return}return t.classList.add("drag"),clearTimeout(s),n.dataTransfer.dropEffect="copy",!1}function l(t){return t.stopPropagation(),t.preventDefault(),e.onDragLeave&&e.onDragLeave(t),clearTimeout(s),s=setTimeout(f,50),!1}function c(t){t.stopPropagation(),t.preventDefault(),e.onDragLeave&&e.onDragLeave(t),clearTimeout(s),f();var n={x:t.clientX,y:t.clientY},a=t.dataTransfer.getData("text");if(a&&e.onDropText&&e.onDropText(a,n),e.onDrop&&t.dataTransfer.items){var u=t.dataTransfer.files,l=Array.from(t.dataTransfer.items).filter(function(t){return"file"===t.kind});if(0===l.length)return;r(l.map(function(t){return function(e){!function(t,e){var n=[];if(t.isFile)t.file(function(n){n.fullPath=t.fullPath,n.isFile=!0,n.isDirectory=!1,e(null,n)},function(t){e(t)});else if(t.isDirectory){var o=t.createReader();!function s(){o.readEntries(function(o){o.length>0?(n=n.concat(Array.from(o)),s()):r(n.map(function(t){return function(e){i(t,e)}}),function(n,o){n?e(n):(o.push({fullPath:t.fullPath,name:t.name,isFile:!1,isDirectory:!0}),e(null,o))})})}()}}(t.webkitGetAsEntry(),e)}}),function(t,r){if(t)throw t;var i=o(r),s=i.filter(function(t){return t.isFile}),a=i.filter(function(t){return t.isDirectory});e.onDrop(s,n,u,a)})}return!1}function f(){t.classList.remove("drag")}};var o=n(4),r=n(5);function i(t,e){var n=[];if(t.isFile){t.file(function(n){n.fullPath=t.fullPath;n.isFile=true;n.isDirectory=false;e(null,n)},function(t){e(t)})}else if(t.isDirectory){var o=t.createReader();s()}function s(){o.readEntries(function(t){if(t.length>0){n=n.concat(Array.from(t));s()}else{a()}})}function a(){r(n.map(function(t){return function(e){i(t,e)}}),function(n,o){if(n){e(n)}else{o.push({fullPath:t.fullPath,name:t.name,isFile:false,isDirectory:true});e(null,o)}})}}},function(t,e,n){"use strict";n.r(e);var o=n(1),r=n.n(o),i=n(2),s=n.n(i),a=n(0),u=n.n(a);let l,c;console.log("TOAST",u.a);const f=2e3,d=new r.a("https://play-spectrum.herokuapp.com/deploy.mp3");function h(t){if(u.a.toast&&"none"!==u.a.toast.style.display)return clearTimeout(c),void(c=setTimeout(()=>h(t),100));u.a.show(t,f)}d.debug(!0).on("stop",()=>h("Stop.")).on("pause",()=>h("Pause.")).on("play",()=>h(`Playing ${l}...`)).on("forward",t=>h(`Forward ${t} seconds.`)).on("rewind",t=>h(`Rewind ${t} seconds.`)).useKeyboard().load().play(),h("Drop an audio file to start playing!"),s()("body",function(t){const e=t[0];console.log("GOT FILE:",e),l=e.name;const n=new window.FileReader;n.addEventListener("load",t=>{const e=t.target.result;d.load(e).play()}),n.addEventListener("error",t=>{console.error("FileReader error"+t),u.a.show("Oops! Something went wrong :(")}),n.readAsArrayBuffer(e)})},function(t,e){t.exports=function(t,e){return(e="number"==typeof e?e:1/0)?function t(n,o){return n.reduce(function(n,r){return Array.isArray(r)&&o<e?n.concat(t(r,o+1)):n.concat(r)},[])}(t,1):Array.isArray(t)?t.map(function(t){return t}):t}},function(t,e,n){(function(e){t.exports=function(t,n){var o,r,i,s=!0;Array.isArray(t)?(o=[],r=t.length):(i=Object.keys(t),o={},r=i.length);function a(t){function r(){n&&n(t,o),n=null}s?e.nextTick(r):r()}function u(t,e,n){o[t]=n,(0==--r||e)&&a(e)}r?i?i.forEach(function(e){t[e](function(t,n){u(e,t,n)})}):t.forEach(function(t,e){t(function(t,n){u(e,t,n)})}):a(null);s=!1}}).call(this,n(6))},function(t,e){var n,o,r=t.exports={};function i(){throw new Error("setTimeout has not been defined")}function s(){throw new Error("clearTimeout has not been defined")}function a(t){if(n===setTimeout)return setTimeout(t,0);if((n===i||!n)&&setTimeout)return n=setTimeout,setTimeout(t,0);try{return n(t,0)}catch(e){try{return n.call(null,t,0)}catch(e){return n.call(this,t,0)}}}!function(){try{n="function"==typeof setTimeout?setTimeout:i}catch(t){n=i}try{o="function"==typeof clearTimeout?clearTimeout:s}catch(t){o=s}}();var u,l=[],c=!1,f=-1;function d(){c&&u&&(c=!1,u.length?l=u.concat(l):f=-1,l.length&&h())}function h(){if(!c){var t=a(d);c=!0;for(var e=l.length;e;){for(u=l,l=[];++f<e;)u&&u[f].run();f=-1,e=l.length}u=null,c=!1,function(t){if(o===clearTimeout)return clearTimeout(t);if((o===s||!o)&&clearTimeout)return o=clearTimeout,clearTimeout(t);try{o(t)}catch(e){try{return o.call(null,t)}catch(e){return o.call(this,t)}}}(t)}}function p(t,e){this.fun=t,this.array=e}function y(){}r.nextTick=function(t){var e=new Array(arguments.length-1);if(arguments.length>1)for(var n=1;n<arguments.length;n++)e[n-1]=arguments[n];l.push(new p(t,e)),1!==l.length||c||a(h)},p.prototype.run=function(){this.fun.apply(null,this.array)},r.title="browser",r.browser=!0,r.env={},r.argv=[],r.version="",r.versions={},r.on=y,r.addListener=y,r.once=y,r.off=y,r.removeListener=y,r.removeAllListeners=y,r.emit=y,r.prependListener=y,r.prependOnceListener=y,r.listeners=function(t){return[]},r.binding=function(t){throw new Error("process.binding is not supported")},r.cwd=function(){return"/"},r.chdir=function(t){throw new Error("process.chdir is not supported")},r.umask=function(){return 0}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,